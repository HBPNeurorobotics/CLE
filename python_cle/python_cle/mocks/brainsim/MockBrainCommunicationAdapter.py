"""
This module contains the brain communication adapter mock and all dependent classes
"""

__author__ = 'GeorgHinkel'

from python_cle.brainsim.BrainInterface import IBrainCommunicationAdapter, INeuronVoltmeter, \
    ICustomDevice, IPatternSpikeGenerator, \
    IPoissonSpikeGenerator, IFixedFrequencySpikeGenerator, ISpikeRecorder

import itertools


class MockVoltmeter(INeuronVoltmeter):
    """
    Represents a mocked voltmeter
    """

    def __init__(self, updates):
        """
        Initializes a mocked voltmeter
        :param updates: A list of pairs when the voltage of this device will update
        """
        self.__voltage = 1
        self.__updates = updates

    @property
    def voltage(self):
        """
        Gets the voltage of the current mocked voltmeter
        :return: The voltage
        """
        return self.__voltage

    @voltage.setter
    def voltage(self, value):
        """
        Sets the voltage of the current voltmeter
        :param value: The current voltage
        """
        self.__voltage = value

    def refresh(self, t):
        """
        Refreshes the voltmeter for time t
        :param t: The current simulation time
        """
        if self.__updates is not None:
            while len(self.__updates) > 0 and self.__updates[0][0] <= t:
                self.__voltage = self.__updates[0][1]
                self.__updates = self.__updates[1:]


class MockPatternGenerator(IPatternSpikeGenerator):
    """
    Represents a mocked pattern generator
    """

    def __init__(self):
        """
        Initializes a new pattern spike generator
        """
        self.__pattern = []

    @property
    def pattern(self):
        """
        Gets the pattern to be generated by the current spike generator
        """
        return self.__pattern

    @pattern.setter
    def pattern(self, value):
        """
        Sets the new pattern for the spike generator
        :param value: The new pattern for the spike generator
        """
        self.__pattern = value


class MockPoissonGenerator(IPoissonSpikeGenerator):
    """
    Represents a mocked poisson based spike generator
    """

    def __init__(self):
        """
        Initializes a new Poisson based spike generator
        """
        self.__rate = 10

    @property
    def rate(self):
        """
        Gets the current rate in which spikes are generated
        """
        return self.__rate

    @rate.setter
    def rate(self, rate):
        """
        Sets the rate in which spikes are generated
        :param rate: The new rate
        """
        self.__rate = rate


class MockFixedFrequencyGenerator(IFixedFrequencySpikeGenerator):
    """
    Represents a mock for fixed frequency spike generators
    """

    def __init__(self):
        """
        Initializes a new fixed frequency spike generator
        """
        self.__rate = 10

    @property
    def rate(self):
        """
        Gets the current frequency in which spikes are generated
        """
        return self.__rate

    @rate.setter
    def rate(self, value):
        """
        Sets the frequency in which spikes are generated
        :param value: The frequency in which to generate spikes
        """
        self.__rate = value


class MockRecorder(ISpikeRecorder):
    """
    Represents a mock spike recorder
    """

    def __init__(self, updates):
        """
        Initializes a new mock recorder
        :param updates: The updates for the mock recorder
        """
        self.__recorded_spikes = []
        self.__updates = updates

    @property
    def recorded_spikes(self):
        """
        Gets the spikes recorded by the spike recorder
        :return: A list containing the recorded spikes
        """
        return self.__recorded_spikes

    @recorded_spikes.setter
    def recorded_spikes(self, spikes):
        """
        Sets the spikes recorded by the current spike recorder
        :param spikes: The list of recorded spikes
        """
        self.__recorded_spikes = spikes

    def refresh(self, t):
        """
        Refreshes the voltmeter for time t
        :param t: The current simulation time
        """
        if self.__updates is not None:
            while len(self.__updates) > 0 and self.__updates[0] <= t:
                self.__recorded_spikes = self.__updates[0][1]
                self.__updates = self.__updates[1:]


class MockBrainCommunicationAdapter(IBrainCommunicationAdapter):
    """
    Represents a mock of the brain communication adapter
    """

    # In this dictionary, the association of spike generator types to classes implementing their
    # functionality is established
    __device_dict = {INeuronVoltmeter: MockVoltmeter, IPatternSpikeGenerator: MockPatternGenerator,
                     IPoissonSpikeGenerator: MockPoissonGenerator,
                     IFixedFrequencySpikeGenerator: MockFixedFrequencyGenerator,
                     ISpikeRecorder: MockRecorder}

    def __init__(self):
        """
        Initializes a new mocked brain communication adapter
        """
        self.__generator_devices = []
        self.__detector_devices = []
        self.__is_initialized = False
        self.__refreshed_at = []

    def initialize(self):
        """
        Initializes the mock adapter
        """
        self.__is_initialized = True

    def register_spike_sink(self, neurons, spike_detector_type, **config):
        """
        Registers a need to consume spikes for the given set of neurons with the given spike
        detector type
        :param neurons: A list of neurons GIDs for a single device, or a list of lists for multiple
        devices
        :param spike_detector_type: The type of the device to be created
        :param config: Additional configuration
        :return: A communication object to retrieve the device status or a list of such
        """

        if isinstance(spike_detector_type, ICustomDevice):
            spike_detector_type.apply(neurons, self)
            self.__detector_devices.append(spike_detector_type)
            return spike_detector_type

        updates = None
        if config is not None and "updates" in config:
            updates = config["updates"]

        device = MockBrainCommunicationAdapter.__device_dict[spike_detector_type](updates)

        self.__detector_devices.append(device)

        if isinstance(neurons, list) and hasattr(neurons[0], '__iter__'):
            return list(itertools.repeat(device, len(neurons)))
        else:
            return device

    def register_spike_source(self, neurons, spike_generator_type, **config):
        """
        Registers a need to generate spikes for the given set of neurons
        :param neurons: A list of neuron GIDs for a single device or a list of lists for multiple
        devices
        :param spike_generator_type: The type of the device to be created
        :param config: Additional configuration
        :return: A communication object to configure the spike generation or a list of such
        """

        if isinstance(spike_generator_type, ICustomDevice):
            spike_generator_type.apply(neurons, self)
            self.__generator_devices.append(spike_generator_type)
            return spike_generator_type

        device = MockBrainCommunicationAdapter.__device_dict[spike_generator_type]()

        self.__generator_devices.append(device)

        if isinstance(neurons, list) and hasattr(neurons[0], '__iter__'):
            return list(itertools.repeat(device, len(neurons)))
        else:
            return device

    def refresh_buffers(self, t):
        """
        Refreshes buffered values for time t
        :param t: The brain simulation time
        """
        self.__refreshed_at.append(t)
        for detector in self.__detector_devices:
            if hasattr(detector, "refresh"):
                detector.refresh(t)

    @property
    def detector_devices(self):
        """
        Gets the detector devices created by this mock
        """
        return self.__detector_devices

    @property
    def generator_devices(self):
        """
        Gets the spike detector devices created by this mock
        """
        return self.__generator_devices

    @property
    def is_initialized(self):
        """
        Gets a value indicating whether initialize has been called
        """
        return self.__is_initialized

    @property
    def refreshed_at(self):
        """
        Gets a list of simulation times at which the mock has been refreshed
        """
        return self.__refreshed_at
